function toggleTheme() { let t = "dark" === document.documentElement.getAttribute("data-theme") ? "light" : "dark"; document.documentElement.setAttribute("data-theme", t), localStorage.setItem("theme", t); document.querySelector(".theme-toggle i").className = "dark" === t ? "fas fa-sun" : "fas fa-moon" } const savedTheme = localStorage.getItem("theme") || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"); document.documentElement.setAttribute("data-theme", savedTheme), document.querySelector(".theme-toggle i").className = "dark" === savedTheme ? "fas fa-sun" : "fas fa-moon"; const historyCtx = document.getElementById("historyChart").getContext("2d"), historyChart = new Chart(historyCtx, { type: "line", data: { labels: [], datasets: [{ label: "CO Level (PPM)", data: [], borderColor: "#3b82f6", tension: .4, fill: !1 }] }, options: { responsive: !0, maintainAspectRatio: !1, plugins: { legend: { labels: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-primary") } } }, scales: { y: { beginAtZero: !0, grid: { color: getComputedStyle(document.documentElement).getPropertyValue("--border-color") }, ticks: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-secondary") } }, x: { grid: { color: getComputedStyle(document.documentElement).getPropertyValue("--border-color") }, ticks: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-secondary") } } } } }), forecastCtx = document.getElementById("forecastChart").getContext("2d"), forecastChart = new Chart(forecastCtx, { type: "line", data: { labels: [], datasets: [{ label: "Historical", data: [], borderColor: "#3b82f6", tension: .4, fill: !1 }, { label: "Forecast", data: [], borderColor: "#10b981", borderDash: [5, 5], tension: .4, fill: !1 }] }, options: { responsive: !0, maintainAspectRatio: !1, plugins: { legend: { labels: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-primary") } }, tooltip: { mode: "index", intersect: !1 } }, scales: { y: { beginAtZero: !0, grid: { color: getComputedStyle(document.documentElement).getPropertyValue("--border-color") }, ticks: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-secondary") } }, x: { grid: { color: getComputedStyle(document.documentElement).getPropertyValue("--border-color") }, ticks: { color: getComputedStyle(document.documentElement).getPropertyValue("--text-secondary") } } } } }); function predictNextValues(t, e = 6) { if (t.length < 2) return Array(e).fill(t[0] || 0); let a = []; for (let o = 1; o < t.length; o++)a.push(t[o] - t[o - 1]); let r = a.reduce((t, e) => t + e, 0) / a.length, s = [], i = t[t.length - 1]; for (let l = 0; l < e; l++) { i += r; let n = (Math.random() - .5) * Math.abs(r); s.push(Math.max(0, i + n)) } return s } function updateHistoryChart(t, e, a) { historicalData.times.length > 24 && (historicalData.times.shift(), historicalData.values.shift(), historicalData.rawValues.shift()); let o = new Date(t).toLocaleTimeString(); historicalData.times.push(o), historicalData.values.push(e), historicalData.rawValues.push(a), historyChart.data.labels = historicalData.times, historyChart.data.datasets[0].data = historicalData.values, historyChart.update(); let r = new Date(t), s = [], i = [], l = historicalData.times.slice(-6), n = historicalData.values.slice(-6); for (let c = 1; c <= 6; c++) { let d = new Date(r.getTime() + 3e5 * c); s.push(d), i.push(d.toLocaleTimeString()) } let u = predictNextValues(historicalData.values, 6); forecastChart.data.labels = [...l, ...i], forecastChart.data.datasets[0].data = n, forecastChart.data.datasets[1].data = [...Array(l.length).fill(null), ...u], forecastChart.update() } function updateChartColors() { let t = getComputedStyle(document.documentElement).getPropertyValue("--text-primary"), e = getComputedStyle(document.documentElement).getPropertyValue("--border-color"); historyChart.options.scales.y.grid.color = e, historyChart.options.scales.x.grid.color = e, historyChart.options.scales.y.ticks.color = t, historyChart.options.scales.x.ticks.color = t, historyChart.options.plugins.legend.labels.color = t, forecastChart.options.scales.y.grid.color = e, forecastChart.options.scales.x.grid.color = e, forecastChart.options.scales.y.ticks.color = t, forecastChart.options.scales.x.ticks.color = t, forecastChart.options.plugins.legend.labels.color = t, historyChart.update(), forecastChart.update() } let activeModal = null, startY = 0, currentY = 0; function showModal(t) { let e = document.getElementById(t); e.classList.add("active"), activeModal = e, document.querySelectorAll(".nav-item").forEach(e => { e.classList.remove("active"), e.textContent.toLowerCase().includes(t.split("-")[0]) && e.classList.add("active") }) } function hideModal(t) { t.classList.remove("active"), activeModal = null, document.querySelectorAll(".nav-item").forEach(t => { t.classList.remove("active"), t.textContent.toLowerCase().includes("home") && t.classList.add("active") }) } document.querySelectorAll(".modal").forEach(t => { t.addEventListener("touchstart", t => { startY = t.touches[0].clientY }), t.addEventListener("touchmove", e => { if (!activeModal) return; let a = (currentY = e.touches[0].clientY) - startY; a > 0 && (e.preventDefault(), t.style.transform = `translate(-50%, ${a}px)`) }), t.addEventListener("touchend", e => { if (activeModal) currentY - startY > 100 && hideModal(t), t.style.transform = "translateX(-50%)" }) }); const historicalData = { times: [], values: [], rawValues: [] }; function updateHistoryChart(t, e, a) { historicalData.times.length > 24 && (historicalData.times.shift(), historicalData.values.shift(), historicalData.rawValues.shift()), historicalData.times.push(new Date(t).toLocaleTimeString()), historicalData.values.push(e), historicalData.rawValues.push(a), historyChart.data.labels = historicalData.times, historyChart.data.datasets[0].data = historicalData.values, historyChart.update() } function getAirQualityStatus(t) { return t <= 50 ? "\uD83D\uDFE2 Safe" : t <= 100 ? "\uD83D\uDFE1 Moderate" : t <= 150 ? "\uD83D\uDFE0 Unhealthy for Sensitive Groups" : t <= 200 ? "\uD83D\uDD34 Unhealthy" : "\uD83D\uDFE3 Very Dangerous" } function getRecommendation(t) { return t <= 50 ? "Air quality is good. Perfect for outdoor activities." : t <= 100 ? "Air quality is acceptable. Consider reducing prolonged outdoor activities if you are sensitive to CO." : t <= 150 ? "Members of sensitive groups may experience health effects. Limit outdoor exposure." : t <= 200 ? "Everyone may begin to experience health effects. Avoid outdoor activities." : "Health alert: everyone may experience serious health effects. Stay indoors." } function updateGreeting() { let t = new Date().getHours(), e = document.getElementById("greeting"); t >= 5 && t < 12 ? e.textContent = "Good Morning" : t >= 12 && t < 17 ? e.textContent = "Good Afternoon" : t >= 17 && t < 21 ? e.textContent = "Good Evening" : e.textContent = "Good Night" } function formatTimestamp(t) { let e = new Date(t), a; return `${e.getHours().toString().padStart(2, "0")}:${e.getMinutes().toString().padStart(2, "0")}` } async function fetchData() { try { let t = await (await fetch("https://raw.githubusercontent.com/4211421036/qualityair/main/data.json")).json(); document.getElementById("ppm-value").textContent = t.data.ppm.toFixed(1), document.getElementById("raw-value").textContent = t.data.raw_value, document.getElementById("air-quality-status").textContent = getAirQualityStatus(t.data.ppm), document.getElementById("timestamp").textContent = formatTimestamp(t.timestamp), document.getElementById("daily-recommendation").textContent = getRecommendation(t.data.ppm), updateHistoryChart(t.timestamp, t.data.ppm, t.data.raw_value), updateChartColors() } catch (e) { console.error("Error fetching data:", e) } } function updateChartColors() { let t = getComputedStyle(document.documentElement).getPropertyValue("--text-primary"), e = getComputedStyle(document.documentElement).getPropertyValue("--border-color"); historyChart.options.scales.y.grid.color = e, historyChart.options.scales.x.grid.color = e, historyChart.options.scales.y.ticks.color = t, historyChart.options.scales.x.ticks.color = t, historyChart.options.plugins.legend.labels.color = t, historyChart.update() } document.getElementById("current-date").textContent = new Date().toLocaleDateString("en-US", { weekday: "long", year: "numeric", month: "long", day: "numeric" }), updateGreeting(), fetchData(), setInterval(fetchData, 5e3), setInterval(updateGreeting, 6e4), window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", t => { let e = t.matches ? "dark" : "light"; document.documentElement.setAttribute("data-theme", e), localStorage.setItem("theme", e), updateChartColors() });
